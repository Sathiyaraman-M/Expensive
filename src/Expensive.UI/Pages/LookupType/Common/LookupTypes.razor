@using Expensive.Common.Contracts.LookupTypes
@using Expensive.Common.Enums
@inject ILookupTypeService LookupTypeService

<PageTitle>@CategoryNamePlural | Expensive</PageTitle>

<MudStack Spacing="1">
    <MudText Typo="Typo.h5" Color="Color.Primary">@CategoryNamePlural</MudText>
    <MudText Typo="Typo.body2">Manage all @CategoryNamePlural.ToLower()</MudText>
</MudStack>

<MudPaper Outlined Class="my-3">
    <MudStack Row Class="px-3 py-1" AlignItems="AlignItems.Center">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <AuthorizeView Policy="@Permissions.LookupTypes.Create">
                <MudTooltip Text="@($"New {CategoryName}")">
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Add"
                                   OnClick="@InvokeNewLookupTypeDialogAsync"/>
                </MudTooltip>
            </AuthorizeView>
            <MudTooltip Text="Reload">
                <MudIconButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(_searchQuery))"
                               Icon="@Icons.Material.Filled.Refresh"/>
            </MudTooltip>
            <MudTooltip Text="Export">
                <MudIconButton Variant="Variant.Filled" Color="Color.Dark" Icon="@Icons.Custom.FileFormats.FileExcel"/>
            </MudTooltip>
            <MudTextField T="@string" ValueChanged="@(OnSearch)" DebounceInterval="300" Placeholder="@($"Search for {CategoryNamePlural}")"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                          Variant="Variant.Outlined" Margin="Margin.Dense"/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <AuthorizeView Policy="@Permissions.LookupTypes.Create">
                <MudStack AlignItems="AlignItems.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                               IconColor="Color.Surface" OnClick="@InvokeNewLookupTypeDialogAsync">
                        New @CategoryName
                    </MudButton>
                </MudStack>
            </AuthorizeView>
            <MudStack AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(_searchQuery))"
                           StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface">
                    Reload
                </MudButton>
            </MudStack>
            <MudStack AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Dark"
                           StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Surface">
                    Export
                </MudButton>
            </MudStack>
            <MudStack AlignItems="AlignItems.Center" Class="flex-grow-1"></MudStack>
            <MudStack AlignItems="AlignItems.Center" Class="flex-grow-1 ms-auto me-0">
                <MudTextField T="@string" ValueChanged="@(OnSearch)" DebounceInterval="300" Placeholder="@($"Search for {CategoryNamePlural}")"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              Variant="Variant.Outlined" Margin="Margin.Dense" FullWidth/>
            </MudStack>
        </MudHidden>
    </MudStack>
    <MudDivider DividerType="DividerType.FullWidth"/>
    <MudTable Dense Hover Striped Bordered Breakpoint="Breakpoint.None" HorizontalScrollbar Elevation="0"
              LoadingProgressColor="Color.Secondary" @ref="@_mudTable" ServerData="OnServerReloadAsync"
              OnRowClick="OnRowClick" T="LookupTypeResponse" RowClass="cursor-pointer">
        <NoRecordsContent>
            <MudAlert Class="ma-2" Severity="Severity.Normal">No @CategoryNamePlural.ToLower() found.</MudAlert>
        </NoRecordsContent>
        <LoadingContent>
            <MudText Typo="Typo.body1" Align="Align.Center" GutterBottom="true">Loading...</MudText>
        </LoadingContent>
        <HeaderContent>
            <MudTh>S.No</MudTh>
            <MudTh>Code</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="lookupType">
            <MudTd DataLabel="S.No">@lookupType.SerialNo</MudTd>
            <MudTd DataLabel="Code">
                <MudHighlighter HighlightedText="@_searchQuery" Text="@lookupType.Code"/>
            </MudTd>
            <MudTd DataLabel="Name">
                <MudHighlighter HighlightedText="@_searchQuery" Text="@lookupType.Name"/>
            </MudTd>
            <MudTd>
                <MudStack Row>
                    <AuthorizeView Policy="@Permissions.LookupTypes.Update">
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                                       Size="Size.Small" Style="padding-top: 0; padding-bottom: 0"
                                       OnClick="@(() => InvokeUpdateLookupTypeDialogAsync(lookupType.Id))"/>
                    </AuthorizeView>
                    <AuthorizeView Policy="@Permissions.LookupTypes.Delete">
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       Size="Size.Small" Style="padding-top: 0; padding-bottom: 0"
                                       OnClick="@(() => DeleteLookupTypeAsync(lookupType.Id))"/>
                    </AuthorizeView>
                </MudStack>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    [Parameter]
    public LookupTypeCategory Category { get; set; }
    
    [Parameter]
    public string CategoryName { get; set; } = string.Empty;
    
    [Parameter]
    public string CategoryNamePlural { get; set; } = string.Empty;
    
    
    private IList<LookupTypeResponse> _lookTypes = [];
    private MudTable<LookupTypeResponse> _mudTable = null!;
    private long _totalItems;
    private string _searchQuery = string.Empty;

    private async Task<TableData<LookupTypeResponse>> OnServerReloadAsync(TableState tableState, CancellationToken cancellationToken)
    {
        if (!string.IsNullOrWhiteSpace(_searchQuery))
        {
            tableState.Page = 0;
        }

        await LoadDataAsync(tableState.Page, tableState.PageSize, cancellationToken);
        return new TableData<LookupTypeResponse> { TotalItems = (int)_totalItems, Items = _lookTypes };
    }

    private async Task LoadDataAsync(int page, int pageSize, CancellationToken cancellationToken)
    {
        try
        {
            var result = await LookupTypeService.GetAllAsync(Category, page + 1, pageSize, _searchQuery, cancellationToken);
            if (result.Succeeded)
            {
                _totalItems = result.TotalCount;
                _lookTypes = result.Data;
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
        }
    }

    private void OnSearch(string text)
    {
        CancelToken();
        _searchQuery = text;
        _mudTable.ReloadServerData();
    }

    private async Task InvokeNewLookupTypeDialogAsync()
    {
        var dialogOptions = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<NewLookupTypeDialog>($"New {CategoryName}", new DialogParameters
        {
            { nameof(NewLookupTypeDialog.Category), Category },
            { nameof(NewLookupTypeDialog.CategoryName), CategoryName }
        }, dialogOptions);
        var result = await dialog.Result;
        if (!(result?.Canceled ?? false))
        {
            OnSearch(_searchQuery);
        }
    }

    private Task OnRowClick(TableRowClickEventArgs<LookupTypeResponse> args)
    {
        return InvokeUpdateLookupTypeDialogAsync(args.Item?.Id ?? Guid.Empty);
    }

    private async Task InvokeUpdateLookupTypeDialogAsync(Guid id)
    {
        var dialogOptions = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<UpdateLookupTypeDialog>($"Update {CategoryName}", new DialogParameters
        {
            { nameof(UpdateLookupTypeDialog.Id), id },
            { nameof(UpdateLookupTypeDialog.Category), Category },
            { nameof(UpdateLookupTypeDialog.CategoryName), CategoryName }
        }, dialogOptions);
        var result = await dialog.Result;
        if (!(result?.Canceled ?? false))
        {
            OnSearch(_searchQuery);
        }
    }

    private async Task DeleteLookupTypeAsync(Guid id)
    {
        if (await DialogService.ShowDeleteDialog($"Delete {CategoryName}", $"Are you sure you want to delete this {CategoryName.ToLower()}?", yesText: "Delete", cancelText: "Cancel"))
        {
            try
            {
                var response = await LookupTypeService.DeleteLookupTypeAsync(id);
                if (response.Succeeded)
                {
                    Snackbar.Add($"{CategoryName} deleted successfully.", Severity.Success);
                    await _mudTable.ReloadServerData();
                }
                else
                {
                    foreach (var message in response.Messages)
                    {
                        Snackbar.Add(message, Severity.Error);
                    }
                }
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }
}