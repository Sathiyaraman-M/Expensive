@page "/Users/{Id:guid}/Permissions"
@using Personals.Common.Contracts.Users
@inject IUserService UserService
@inject IAuthorizationService AuthorizationService
@attribute [Authorize(Policy = Permissions.Users.ViewPermissions)]

<PageTitle>Manage User Permissions | Personals</PageTitle>

<MudOverlay @bind-Visible="@Loading" DarkBackground="AppThemeService.IsDarkMode" LightBackground="@(!AppThemeService.IsDarkMode)" Absolute>
    <MudStack AlignItems="AlignItems.Center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate/>
        <MudText>Loading...</MudText>
    </MudStack>
</MudOverlay>
<EditForm Model="@Model" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />
    <MudPaper Outlined Class="mb-4">
        <MudStack Row Justify="Justify.SpaceBetween" Class="pa-2">
            <MudStack Class="px-1" Spacing="0">
                <MudText Typo="Typo.h5" Color="Color.Primary">Manage User Permissions</MudText>
                <AuthorizeView Policy="@Permissions.Users.UpdatePermissions" Context="_">
                    <Authorized>
                        <MudText>Update permissions of this user: <b>@(_user?.FullName ?? "Loading...")</b></MudText>
                    </Authorized>
                    <NotAuthorized>
                        <MudText>View permissions of this user: <b>@(_user?.FullName ?? "Loading...")</b></MudText>
                    </NotAuthorized>
                </AuthorizeView>
            </MudStack>
            <AuthorizeView Policy="@Permissions.Users.UpdatePermissions" Context="_">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Update" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Update</MudButton>
                    <MudButton Color="Color.Default" StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Filled" OnClick="ConfirmCancel">Cancel</MudButton>
                </MudStack>
            </AuthorizeView>
        </MudStack>
        <MudDivider DividerType="DividerType.FullWidth" Class="mb-2" />
        <MudTabs Rounded Color="Color.Primary" ApplyEffectsToContainer Border Outlined Class="mx-2 mb-2">
            @foreach (var category in Permissions.GetAllPermissionCategories())
            {
                <MudTabPanel Text="@category" Class="pa-2">
                    <MudGrid Class="ma-2">
                        @foreach (var permission in Permissions.GetPermissionsForCategory(category))
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                                <MudCheckBox T="bool" Dense Label="@GetPermissionName(permission)" Value="@Model.Permissions.Contains(permission)" ValueChanged="@(() => TogglePermission(permission))" Disabled="@(!_canUpdatePermissions)"/>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>
            }
        </MudTabs>
    </MudPaper>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private UserResponse? _user;
    private bool Loading { get; set; } = true;
    private bool _canUpdatePermissions;
    
    private UpdateUserPermissionsRequest Model { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        _canUpdatePermissions = (await AuthorizationService.AuthorizeAsync(user, Permissions.Users.UpdatePermissions)).Succeeded;
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.WhenAll(LoadUserAsync(), LoadUserPermissionsAsync());
        Loading = false;
    }

    private async Task LoadUserAsync()
    {
        try
        {
            var result = await UserService.GetUserByIdAsync(Id);
            if (result.Succeeded)
            {
                _user = result.Data;
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);   
                }
                NavigationManager.NavigateTo("/users", replace: true);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Something went wrong. {e.Message}", Severity.Error);
            NavigationManager.NavigateTo("/users", replace: true);
        }
    }
    
    private async Task LoadUserPermissionsAsync()
    {
        try
        {
            var result = await UserService.GetUserPermissionsAsync(Id);
            if (result.Succeeded)
            {
                Model.Permissions = result.Data;
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);   
                }
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Something went wrong. {e.Message}", Severity.Error);
        }
    }
    
    private void TogglePermission(string permission)
    {
        if (Model.Permissions.Contains(permission))
        {
            Model.Permissions.Remove(permission);
        }
        else
        {
            Model.Permissions.Add(permission);
        }
    }

    private async Task SubmitAsync()
    {
        try
        {
            var result = await UserService.UpdateUserPermissionsAsync(Id, Model);
            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/users", replace: true);
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);   
                }
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Something went wrong. {e.Message}", Severity.Error);
        }
    }

    private async Task ConfirmCancel()
    {
        if(await DialogService.ShowMessageBox("Discard update?", "Are you sure want to discard the changes?", yesText: "Discard", cancelText: "Cancel") == true)
        {
            NavigationManager.NavigateTo("/users", replace: true);
        }
    }

    private static string GetPermissionName(string permission) => permission.Split('.').Last();
}